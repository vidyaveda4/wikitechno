library("gbm")
library("glmnet")
library("rpart")

### Kaggle Scripts: Ponpare Coupon Purchase Prediction ###
### Author: Subhajit Mandal ###

#read in all the input data
cpdtr <- read.csv("../input/coupon_detail_train.csv")
cpltr <- read.csv("../input/coupon_list_train.csv")
cplte <- read.csv("../input/coupon_list_test.csv")
ulist <- read.csv("../input/user_list.csv")

#making of the train set
train <- merge(cpdtr,cpltr)
train <- train[,c("COUPON_ID_hash","USER_ID_hash",
                  "GENRE_NAME","DISCOUNT_PRICE",
                  "USABLE_DATE_MON","USABLE_DATE_TUE","USABLE_DATE_WED","USABLE_DATE_THU",
                  "USABLE_DATE_FRI","USABLE_DATE_SAT","USABLE_DATE_SUN","USABLE_DATE_HOLIDAY",
                  "USABLE_DATE_BEFORE_HOLIDAY","ken_name","small_area_name")]
#combine the test set with the train
cplte$USER_ID_hash <- "dummyuser"
cpchar <- cplte[,c("COUPON_ID_hash","USER_ID_hash",
                   "GENRE_NAME","DISCOUNT_PRICE",
                   "USABLE_DATE_MON","USABLE_DATE_TUE","USABLE_DATE_WED","USABLE_DATE_THU",
                   "USABLE_DATE_FRI","USABLE_DATE_SAT","USABLE_DATE_SUN","USABLE_DATE_HOLIDAY",
                   "USABLE_DATE_BEFORE_HOLIDAY","ken_name","small_area_name")]

train <- rbind(train,cpchar)
#NA imputation
# train[is.na(train)] <- 1

# print("first linear model")
# OLS_model <- lm(USER_ID_hash ~ ., data = train)

print("Started Training GBM")

# GBM is easier to process as a data matrix
response_column <- which(colnames(train) == "USER_ID_hash")

trainy <- train$USER_ID_hash
gbm_formula <- as.formula(paste0("USER_ID_hash ~ ", paste(colnames(train[, -response_column]),collapse = " + ")))
gbm_model <- gbm(gbm_formula, train, distribution = "bernoulli", n.trees = 100,bag.fraction = 0.75, cv.folds = 5, interaction.depth = 3)
print("Finished Training GBM")

# For glmnet we make a copy of our dataframe into a matrix
trainx_dm <- data.matrix(train[, -response_column])

# print("Started fitting LASSO")

# lasso_model <- cv.glmnet(x = trainx_dm, y = train$USER_ID_hash, alpha = 1)
# print("Finished fitting LASSO")

# print("Started fitting RIDGE")

# ridge_model <- cv.glmnet(x = trainx_dm, y = train$USER_ID_hash, alpha = 0)
# print("Finished fitting RIDGE")

dtree_model <- rpart(USER_ID_hash ~ ., train)
gbm_perf <- gbm.perf(gbm_model, method = "cv")

# predictions_ols <- predict(OLS_model, testdf[, -response_column])

predictions_gbm <- predict(gbm_model, newdata = test[, -response_column],n.trees = gbm_perf, type = "response")

testx_dm <- data.matrix(test[, -response_column])
# predictions_lasso <- predict(lasso_model, newx = testx_dm, type = "response", s = "lambda.min")[, 1]
# predictions_ridge <- predict(ridge_model, newx = testx_dm, type = "response", s = "lambda.min")[, 1]
# predictions_dtree <- predict(dtree_model, testdf[, -response_column])

uchar$PURCHASED_COUPONS <- do.call(rbind, lapply(1:nrow(uchar),FUN=function(i){
  purchased_cp <- paste(test$COUPON_ID_hash[order(score[i,], decreasing = TRUE)][1:10],collapse=" ")
  return(purchased_cp)
}))

print("OLS: Area under the ROC curve:")

auc(test$USER_ID_hash, predictions_ols)

print("Rdige: Area under the ROC curve:")

auc(test$USER_ID_hash, predictions_ridge)

print("LASSO: Area under the ROC curve:")

auc(testdf$USER_ID_hash, predictions_lasso)

print("GBM: Area under the ROC curve:")

auc(testdf$USER_ID_hash, predictions_gbm)

print("Decision Tree: Area under the ROC curve:")

auc(testdf$USER_ID_hash, predictions_dtree)
